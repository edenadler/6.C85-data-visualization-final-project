import {
  IconBase_default
} from "./chunk-IWCLU6PO.js";
import {
  SvelteComponentDev,
  add_location,
  assign,
  attr_dev,
  children,
  claim_component,
  claim_svg_element,
  create_component,
  destroy_component,
  detach_dev,
  dispatch_dev,
  exclude_internal_props,
  get_spread_object,
  get_spread_update,
  init,
  insert_hydration_dev,
  mount_component,
  noop,
  safe_not_equal,
  svg_element,
  transition_in,
  transition_out,
  validate_slots
} from "./chunk-K6MJRMI7.js";
import "./chunk-RSJERJUL.js";

// node_modules/svelte-icons/gi/GiBank.svelte
var file = "node_modules/svelte-icons/gi/GiBank.svelte";
function create_default_slot(ctx) {
  let path;
  const block = {
    c: function create() {
      path = svg_element("path");
      this.h();
    },
    l: function claim(nodes) {
      path = claim_svg_element(nodes, "path", { d: true });
      children(path).forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(path, "d", "M256 25.6L52 134.4h170v-56h68v55.094c2.53.258 5.04.567 7.54.906H460L256 25.6zm-16 70.8v57.38l-6.248 2.005c-14.24 4.573-26.103 11.94-36.07 22.322-17.686 18.425-26.735 43.597-26.735 77.368 0 33.38 8.89 58.507 26.282 77.144 10.118 10.787 22.11 18.3 36.477 22.83l6.293 1.984V420.4h32v-59.85l8.373-.587c9.6-.67 18.958-2.145 28.092-4.45 11.206-2.827 22.043-6.956 32.588-12.26V252.11h-61.035v19.974h30.955v49.576l-5.403 2.356c-4.373 1.906-9.156 3.264-14.322 4.152l-.08.014-.08.013c-5.003.768-10.33 1.133-15.988 1.133-21.365 0-39.558-7.483-51.834-22.228-11.08-13.308-17.89-27.01-17.89-51.625 0-24.844 7.066-38.687 18.532-51.912h.002c12.767-14.722 31.483-22.09 53.56-22.09 11.836 0 23.63 1.875 35.264 5.574 7.058 2.227 14.08 5.21 21.075 8.764v-32.35a138.957 138.957 0 0 0-26.992-9.155h-.006l-.008-.002c-8.43-1.94-17.185-3.16-26.287-3.65l-8.517-.458V96.4h-32zm-192 54v18h25v206H48v18h96v-18h-25v-206h25v-18H48zm320 0v18h25v206h-25v18h96v-18h-25v-206h25v-18h-96zm-327 258v30h181v-30H41zm249 0v30h181v-30H290zm-265 48v30h462v-30H25z");
      add_location(path, file, 4, 10, 153);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, path, anchor);
    },
    p: noop,
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(path);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot.name,
    type: "slot",
    source: '(4:8) <IconBase viewBox=\\"0 0 512 512\\" {...$$props}>',
    ctx
  });
  return block;
}
function create_fragment(ctx) {
  let iconbase;
  let current;
  const iconbase_spread_levels = [
    { viewBox: "0 0 512 512" },
    /*$$props*/
    ctx[0]
  ];
  let iconbase_props = {
    $$slots: { default: [create_default_slot] },
    $$scope: { ctx }
  };
  for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
  }
  iconbase = new IconBase_default({ props: iconbase_props, $$inline: true });
  const block = {
    c: function create() {
      create_component(iconbase.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(iconbase.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(iconbase, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const iconbase_changes = dirty & /*$$props*/
      1 ? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(
        /*$$props*/
        ctx2[0]
      )]) : {};
      if (dirty & /*$$scope*/
      2) {
        iconbase_changes.$$scope = { dirty, ctx: ctx2 };
      }
      iconbase.$set(iconbase_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(iconbase.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(iconbase.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(iconbase, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("GiBank", slots, []);
  $$self.$$set = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  };
  $$self.$capture_state = () => ({ IconBase: IconBase_default });
  $$self.$inject_state = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$props = exclude_internal_props($$props);
  return [$$props];
}
var GiBank = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, {});
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "GiBank",
      options,
      id: create_fragment.name
    });
  }
};
var GiBank_default = GiBank;
export {
  GiBank_default as default
};
//# sourceMappingURL=svelte-icons_gi_GiBank__svelte.js.map
